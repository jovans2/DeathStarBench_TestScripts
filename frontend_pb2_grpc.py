# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import frontend_pb2 as frontend__pb2


class FrontendStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LambdaText = channel.unary_unary(
                '/frontend.Frontend/LambdaText',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaSGraph = channel.unary_unary(
                '/frontend.Frontend/LambdaSGraph',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaUser = channel.unary_unary(
                '/frontend.Frontend/LambdaUser',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaPstStr = channel.unary_unary(
                '/frontend.Frontend/LambdaPstStr',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaUsrMnt = channel.unary_unary(
                '/frontend.Frontend/LambdaUsrMnt',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaHomeT = channel.unary_unary(
                '/frontend.Frontend/LambdaHomeT',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaCPost = channel.unary_unary(
                '/frontend.Frontend/LambdaCPost',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )
        self.LambdaUrlShort = channel.unary_unary(
                '/frontend.Frontend/LambdaUrlShort',
                request_serializer=frontend__pb2.Message.SerializeToString,
                response_deserializer=frontend__pb2.MessageResponse.FromString,
                )


class FrontendServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LambdaText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaSGraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaPstStr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaUsrMnt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaHomeT(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaCPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LambdaUrlShort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrontendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LambdaText': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaText,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaSGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaSGraph,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaUser,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaPstStr': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaPstStr,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaUsrMnt': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaUsrMnt,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaHomeT': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaHomeT,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaCPost': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaCPost,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
            'LambdaUrlShort': grpc.unary_unary_rpc_method_handler(
                    servicer.LambdaUrlShort,
                    request_deserializer=frontend__pb2.Message.FromString,
                    response_serializer=frontend__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'frontend.Frontend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Frontend(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LambdaText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaText',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaSGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaSGraph',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaUser',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaPstStr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaPstStr',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaUsrMnt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaUsrMnt',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaHomeT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaHomeT',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaCPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaCPost',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LambdaUrlShort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frontend.Frontend/LambdaUrlShort',
            frontend__pb2.Message.SerializeToString,
            frontend__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
